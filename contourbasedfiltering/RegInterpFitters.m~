
classdef RegInterpFitters < handle
    % All possible fitting/regressor/interpolations
    % Local and global
    properties
        X;
        p;
        poly;
        PfBasis;
        mxentpoly;
        active_method;
        possible_methods={'PolyFit',... % do a global polynomial fit tna then take exp
            'DecisionTree',... % do decision tree/CART regression
            'KnnMean',... % just take mean of k-nearest neigbors
            'KnnPolyFit',... % get nearest neigbors and do smooth poly regression
            'KnnLeastDeg',... % do k-nn and then least degree interpolation
            'CARTgmm'... % do a cart and then apply gmm to each bin
            };
        method_params;
    end
    methods
        % constructor. save a copy constants
        function obj= RegInterpFitters(method)
            obj.active_method=method;
        end

        function obj= fit(obj,X,p,Xineq,Xtest,Pf)
           if strcmp(obj.active_method, 'PolyFit' )
                obj.method_params.mxentpoly = fitExpPoly_A_Atop_Aineq(X,p,Pf,Xineq,Xtest);
           end
           if strcmp(obj.active_method, 'DecisionTree' )
                obj.method_params.tree = fitTree(X,p,Pf,Xineq,Xtest);
           end
           if strcmp(obj.active_method, 'CARTgmm' )
                obj.method_params.tree = fitTree(X,p,Pf,Xineq,Xtest);
                [GMM,boxes] = fitGMM2tree(X,p,obj.method_params.tree);
                obj.method_params.GMM = GMM;
                obj.method_params.boxes = boxes;
           end
           
           if strcmp(obj.active_method, 'KnnMean' )
                obj.method_params.X = X;
                obj.method_params.Xineq = Xineq;
                obj.method_params.p = p;
           end
           if strcmp(obj.active_method, 'KnnLeastDeg' )
                obj.method_params.X = X;
                obj.method_params.Xineq = Xineq;
                obj.method_params.p = p;
           end
           if strcmp(obj.active_method, 'KnnPolyFit' )
                obj.method_params.X = X;
                obj.method_params.Xineq = Xineq;
                obj.method_params.p = p;
                obj.method_params.Pf = Pf;
           end
           
        end
        %-----------------------------------------------------------------
        function [f,flog]=evalfit(obj,Xtest)
            if strcmp(obj.active_method, 'PolyFit' )
                flog = evaluate_polyND(obj.method_params.mxentpoly,Xtest);
                f = exp(flog);
            end
            if strcmp(obj.active_method, 'DecisionTree' )
                flog = predict(obj.method_params.tree,Xtest);
                f = exp(flog);
            end
            if strcmp(obj.active_method, 'KnnMean' )
                flog = evalKnnMean(obj.method_params.X,obj.method_params.p,obj.method_params.Xineq,Xtest);
                f = exp(flog);
            end
            if strcmp(obj.active_method, 'KnnLeastDeg' )
                flog = evalKnnLeatPoly(obj.method_params.X,obj.method_params.p,obj.method_params.Xineq,Xtest);
                f = exp(flog);
            end
            if strcmp(obj.active_method, 'KnnPolyFit' )
                flog = evalKnnPolyFit(obj.method_params.X,obj.method_params.p,obj.method_params.Xineq,Xtest,obj.method_params.Pf);
                f = exp(flog);
            end
            if strcmp(obj.active_method, 'CARTgmm' )
                f = evalGMM(obj.method_params.GMM,Xtest);
                flog = log(f);
            end
        end
         %-----------------------------------------------------------------
        function f=evalmetric(obj,Xtest,ptest)
            plogtest = log(ptest);
            [~,plogfit]=obj.evalfit(Xtest);
            a=abs(plogtest-plogfit)./plogtest;
            f(1)=max(a);
            f(2)=mean(a);
        end
         %-----------------------------------------------------------------
        function plot(obj,X,p,Xtest,states,LB,UB)
            [f,flog]=obj.evalfit(X);
            ftrue = p;
            flogtrue = log(p);
            
            
            plot3(X(:,states(1)),X(:,states(2)),ftrue,'ro' )
            hold on
            
            if isempty(Xtest)==0
               [ftest,ftestlog]=obj.evalfit(Xtest); 
%                keyboard
               plot3(Xtest(:,states(1)),Xtest(:,states(2)),ftest,'k*' )
            end
            
            
            plot3(X(:,states(1)),X(:,states(2)),f,'bs' )
            for i =1:3
                Xmc = mvurnd(LB,UB,5000);
                [fmc,flogmc]=obj.evalfit(Xmc);
                indmcbad = fmc>max(ftrue);
                fmc(indmcbad);
                plot3(Xmc(indmcbad,states(1)),Xmc(indmcbad,states(2)),fmc(indmcbad),'g+' )
            end
        end

        
    end
end
%% fit gmm to cart
function [GMM,boxes] = fitGMM2tree(X,p,tree)
    [N,dim]=size(X);
    boxes={-1.5*ones(1,dim),1.5*ones(1,dim),1};
    states=tree.PredictorNames;
    
    for nc = 1:length(tree.CutPredictor)
        st = tree.CutPredictor{nc};
        if strcmp(tree.CutPredictor{nc},'')==false % node has a branch
            cp = tree.CutPoint(nc);
            stind = getindex2cell(states,st);
            for r=1:nc+10
                if boxes{r,3}==nc
                    break
                end
            end

            boxmin = boxes{r,1};
            boxmax = boxes{r,2};

            newminL=boxmin;
            newmaxL = boxmax;
            newmaxL(stind) = cp;

            newminR=boxmin;
            newmaxR = boxmax;
            newminR(stind) = cp;

            l = size(boxes,1);
            boxes{l+1,1}=newminL;
            boxes{l+1,2}=newmaxL;
            boxes{l+1,3}=tree.Children(nc,1);

            boxes{l+2,1}=newminR;
            boxes{l+2,2}=newmaxR;
            boxes{l+2,3}=tree.Children(nc,2);

            boxes(r,:)=[];

        else  % node has no brachs or cildern ... hence it is a leaf

        end

    end
    
    Nb = size(boxes,1);
    
    GMM.w = ones(Nb,1)/Nb;
    GMM.mx = cell(Nb,1);
    GMM.Px = cell(Nb,1);
    GMM.Ngcomp = Nb;

    for i=1:Nb
        lb = boxes{i,1};
        ub = boxes{i,2};
        y1 = sum( (X - repmat(lb,N,1))>=0,2);
        y2 = sum( (repmat(ub,N,1)-X)>=0,2);
        
        Xd = X((y1==dim) & (y2==dim),:);
        pd = p((y1==dim) & (y2==dim));

        
%         # NEED TO COMPUTE THE     
        if isempty(Xd)
            Xd=mvurnd(lb,ub,100);
            pd=0.2*min(p)*ones(100,1);
        end
        
        [mm,PP] = MeanCov(Xd,pd/sum(pd));
        [U,D]=eig(PP);
        if any(diag(D)<=1e-4)
            dd=diag(D);
            dd(dd<1e-4)=1e-4;
            D=diag(dd);
            PP=U*D*U'; 
        end

        
        ww=GMM.w(i);
%         [c,err,flag] = fmincon(@(c)norm(pd-ww*mvnpdf(Xd,mm(:)',c*PP)),1,[],[],[],[],1,1e10);
%         if flag<0
%             keyboard
%         end
        c=1;
        
        GMM.mx{i} = mm;
        GMM.Px{i} = c*PP;
    end
%     keyboard
    % now optimize weights
    A=zeros(N,GMM.Ngcomp);
    b=zeros(N,1);
    
    b=p(1:N);
    for i=1:GMM.Ngcomp
       A(:,i) =  mvnpdf(X(1:N,:),GMM.mx{i}',GMM.Px{i});
    end
    ncomp = GMM.Ngcomp;
    cvx_begin
        variables w(ncomp) tt(N)
        minimize( norm(tt) )
        subject to
        A*w==b+tt;
        w>=0;
        w<=1;
        sum(w)<=1.2;
        sum(w)>=0.8;
    cvx_end
    
    GMM.w = w;
    
end
%% Knn least poly
function f = evalKnnLeatPoly(X,p,Xineq,Xtest)
    [N,dim]=size(X);
    [Nineq,dimineq]=size(Xineq);
    [Ntest,dimtest]=size(Xtest);
    
    beq = log(p);
    
    cc=min(beq);
    if cc<=0
        bineq = 1.5*cc*ones(Nineq,1);
    else
        bineq = 0.1*(cc+0)*ones(Nineq,1);
    end
    B=[beq;bineq];
    
    Nn=dim+5;
    
    f=zeros(Ntest,1);
    Xstack = [X;Xineq];
    
    idx = knnsearch(Xstack,Xtest,'K',Nn);
    for i=1:Ntest
        [mp,mpfactor] = mpapi(Xstack(idx(i,:),:)',B(idx(i,:))');
        f(i) = mpval(mp,Xtest(i,:)');
    end
    
end
%% Knn poly fit
function flog = evalKnnPolyFit(X,p,Xineq,Xtest,Pf)
    [N,dim]=size(X);
    [Nineq,dimineq]=size(Xineq);
    [Ntest,dimtest]=size(Xtest);
    
    beq = log(p);
    
    cc=min(beq);
    if cc<=0
        bineq = 1.5*cc*ones(Nineq,1);
    else
        bineq = 0.1*(cc+0)*ones(Nineq,1);
    end
    B=[beq;bineq];
    
    Nn=dim+5;
    
    flog=zeros(Ntest,1);
    Xstack = [X;Xineq];
    
    idx = knnsearch(Xstack,Xtest,'K',Nn);
    parfor i=1:Ntest
        mxentpoly = fitExpPoly_A_Atop_Aineq(Xstack(idx(i,:),:),B(idx(i,:)),Pf,[],[]);
        
        flog(i) = evaluate_polyND(mxentpoly,Xtest(i,:));
    end
    
end
%% Knn mean
function f = evalKnnMean(X,p,Xineq,Xtest)
    [N,dim]=size(X);
    [Nineq,dimineq]=size(Xineq);
    [Ntest,dimtest]=size(Xtest);
    
    beq = log(p);
    
    cc=min(beq);
    if cc<=0
        bineq = 1.5*cc*ones(Nineq,1);
    else
        bineq = 0.1*(cc+0)*ones(Nineq,1);
    end
    B=[beq;bineq];
    
    Nn=3;
    
    f=zeros(Ntest,1);

    idx = knnsearch([X;Xineq],Xtest,'K',Nn);
%     keyboard
    for i=1:Ntest
        f(i) = mean(B(idx(i,:)));
    end

           
end
%% RegTree

function tree = fitTree(X,p,Pf,Xineq,Xtest)
    [N,dim]=size(X);
    [Nineq,dimineq]=size(Xineq);
    
%     factconst = max(p)/10;
%     pnfit = p/factconst;
    beq = log(p);
    
    cc=min(beq);
    if cc<=0
        bineq = 10*cc*ones(Nineq,1);
    else
        bineq = 0.1*(cc+0)*ones(Nineq,1);
    end

    states=cell(1,dim);
    for i=1:dim
       states{i} = num2str(i); 
    end

    tree = fitrtree([X;Xineq],[beq;bineq],'MinParentSize',dim+2,'MaxNumSplits',5000,'MinLeafSize',dim+2,...
                    'PredictorNames',states,'ResponseName','probs');

end
%% POLYFIT

function mxentpoly = fitExpPoly_A_Atop_Aineq(X,p,Pf,Xineq,Xtest)
    [N,dim] = size(X);
    lamdim = length(Pf);
    Aeq=zeros(N,lamdim);
    

    for ib=1:length(Pf)
        Aeq(:,ib)=evaluate_PolyforLargetSetX(Pf{ib},X);
    end



    factconst = max(p)/10;
    pnfit = p/factconst;
    beq = log(pnfit);

    Ntop = 2;
    AeqTop = Aeq(1:Ntop,:);
    beqTop = beq(1:Ntop);
    
    if isempty(Xtest)
        Atest=[];
        btest=[];
    else
        Atest=zeros(size(Xtest,1),lamdim);
        for ib=1:length(Pf)
            Atest(:,ib)=evaluate_PolyforLargetSetX(Pf{ib},Xtest);
        end
        btest = max(beq)*ones(size(Atest,1),1);
    end
    
    if isempty(Xineq)
        Nineq=1;
        Aineq=zeros(1,lamdim);
        bineq=zeros(1,lamdim);
    else
        Nineq = size(Xineq,1);
        Aineq=zeros(size(Xineq,1),lamdim);
        tic
        for ib=1:length(Pf)
            Aineq(:,ib)=evaluate_PolyforLargetSetX(Pf{ib},Xineq);
        end
        toc
        cc=min(beq);
        if cc<=0
            bineq = 1.5*cc*ones(size(Aineq,1),1);
        else
            bineq = 0.5*(cc+0)*ones(size(Aineq,1),1);
        end
    
    end

%     CC=linspace(0,100,10);
    CC=[0.5];
    LAMS=zeros(lamdim,length(CC));
    costs = zeros(1,length(CC));
    for ci = 1:length(CC)
        [lam,teq]=polyfitcvx_parasolve(CC(ci),N,Ntop,lamdim,Aeq,beq,AeqTop,beqTop,Aineq,bineq);
        LAMS(:,ci)=lam;
        costs(ci) = norm(teq,2);
        
%         if isempty(Atest)==0
%             if all(Atest*lam <= btest)
%                 disp('All probs are in the bounds')
%                 break
%             end
%             
%         else
%             if ci>1
%                break
%             end
%         end

        
    end

    lam(1) = lam(1)+log(factconst);
    lamsol = lam;

    mxentpoly=zeros(1,dim+1);
    for i=1:lamdim
        mxentpoly=add_sub_polyND(mxentpoly, scalar_multiply_polyND(lamsol(i),Pf{i}),'add');
    end
    mxentpoly=simplify_polyND(mxentpoly);


end
%-------------------------------------------------------------------
function [lam,teq]=polyfitcvx_parasolve(C,N,Ntop,lamdim,Aeq,beq,AeqTop,beqTop,Aineq,bineq)
    

    cvx_begin
        variables teq(N) lam(lamdim) teqTop(Ntop) 
        minimize( C*norm(lam,1)+100*norm(teq,2) )
        subject to
            Aeq*lam==beq+teq;
            AeqTop*lam==beqTop+teqTop;
            Aineq*lam <=bineq;
    cvx_end
end
%-------------------------------------------------------------------


%%
